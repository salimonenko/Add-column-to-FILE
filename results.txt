Вот что скрипт выводит в браузер при разных значениях переменной $m:
$m=30.000:                                
Time: 0.30208897590637 c                  
Max script memory usage: 25.427968 M
Max PHP memory: 128M
FileSize: 1.200169 M

Time: 3.4731209278107 c
Max script memory usage: 7.602176 M
Max PHP memory: 128M
FileSize: 1.20017 M

For control: sizeof($add)=0
Time: 5.1101629734039 c
Max script memory usage: 6.029312 M
Max PHP memory: 128M
FileSize: 1.20017 M

$m=50.000:
Time: 0.5275661945343 c
Max script memory usage: 43.515904 M
Max PHP memory: 128M
FileSize: 2.00047 M

Time: 10.144800901413 c
Max script memory usage: 10.747904 M
Max PHP memory: 128M
FileSize: 2.000471 M

For control: sizeof($add)=0
Time: 17.454138040543 c
Max script memory usage: 11.010048 M
Max PHP memory: 128M
FileSize: 2.000471 M

_______________________________________________________________________________________
 Таким образом, 1 способ - самый быстрый. Для 30 тыс. строчек в файле, содержащем по 3 случайных строки случайного размера (от 3 до 15 символов), чтобы вставить еще 1 столбец (т.е. в каждую из строчек еще по одной, по четвертой строке), требуется всего 0,3 сек. Если строчек в файле 50 тыс., то соответствующее время уже составит 0.52 сек. Т.е. примерно по 0.1 сек. на каждые 10 тыс. строчек, содержащих по 3 (под)строки указанного размера. 
 то же касается остальных двух способов (2 и 3 способы), то там ситуация гораздо более медленная. Самый медленный способ - с использованием функции preg_replace_callback(). Даже для файла с 30 тыс. строчками добавление 4-го столбца (т.е. 4-го элемента в каждую строчку файла) занимает 5 сек., что очень много. 
 При этом объемы файлов составляют примерно 1 МБ (для 30 тыс. строк) и 2 МБ (для 50 тыс. строк). 
 Таким образом, можно ли использовать файлы вместо баз данных (СУБД)? Наверное, можно, но при мало-мальски серьезных объемах данных эти файлы придется СТРУКТУРИРОВАТЬ и индексировать, примерно по тем же самым механизмам, как это делается в файловых системах, например, FAT, NTFS, NFS и т.д.
